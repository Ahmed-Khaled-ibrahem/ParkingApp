#include <MPU9250_asukiaaa.h>

#define SDA_PIN 21
#define SCL_PIN 22

MPU9250_asukiaaa mySensor;

// Current and previous angles
float pitch = 0.0;
float roll = 0.0;
float pitchOffset = 0.0;
float rollOffset = 0.0;

// Moving average variables
const int WINDOW_SIZE = 10; // Number of samples to average
float pitchBuffer[WINDOW_SIZE];
float rollBuffer[WINDOW_SIZE];
int bufferIndex = 0;

// Threshold for angle change (degrees)
const float THRESHOLD = 1.0; // Ignore changes smaller than 1 degree

void setup() {
  Serial.begin(115200);
  while (!Serial);

  Wire.begin(SDA_PIN, SCL_PIN);
  mySensor.setWire(&Wire);

  // Initialize accelerometer
  mySensor.beginAccel();

  // Initialize buffers
  for (int i = 0; i < WINDOW_SIZE; i++) {
    pitchBuffer[i] = 0.0;
    rollBuffer[i] = 0.0;
  }

  // Set initial orientation as (0, 0)
  Serial.println("Calibrating initial orientation... Keep sensor still.");
  mySensor.accelUpdate();
  float ax = mySensor.accelX();
  float ay = mySensor.accelY();
  float az = mySensor.accelZ();
  pitchOffset = atan2(ax, sqrt(ay * ay + az * az)) * 180.0 / PI;
  rollOffset = atan2(ay, sqrt(ax * ax + az * az)) * 180.0 / PI;
  Serial.println("Calibration complete. Starting at (0, 0).");
}

void loop() {
  // Update accelerometer data
  mySensor.accelUpdate();

  // Get raw accelerometer values
  float ax = mySensor.accelX();
  float ay = mySensor.accelY();
  float az = mySensor.accelZ();

  // Calculate raw angles (degrees)
  float rawPitch = atan2(ax, sqrt(ay * ay + az * az)) * 180.0 / PI - pitchOffset;
  float rawRoll = atan2(ay, sqrt(ax * ax + az * az)) * 180.0 / PI - rollOffset;

  // Update moving average buffers
  pitchBuffer[bufferIndex] = rawPitch;
  rollBuffer[bufferIndex] = rawRoll;
  bufferIndex = (bufferIndex + 1) % WINDOW_SIZE;

  // Compute averages
  float pitchSum = 0.0, rollSum = 0.0;
  for (int i = 0; i < WINDOW_SIZE; i++) {
    pitchSum += pitchBuffer[i];
    rollSum += rollBuffer[i];
  }
  float avgPitch = pitchSum / WINDOW_SIZE;
  float avgRoll = rollSum / WINDOW_SIZE;

  // Only update if change exceeds threshold
  if (abs(avgPitch - pitch) > THRESHOLD) {
    pitch = avgPitch;
  }
  if (abs(avgRoll - roll) > THRESHOLD) {
    roll = avgRoll;
  }

  // Print angles
  Serial.print("Pitch: ");
  Serial.print(pitch);
  Serial.print(" degrees  |  Roll: ");
  Serial.print(roll);
  Serial.println(" degrees");

  delay(100); // Update every 100ms
}
