#include <WiFi.h>
#include <WiFiClientSecure.h>  // Added for HTTPS support
#include <HTTPClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP32Servo.h>

// WiFi credentials
const char* ssid = "Ahmed";
const char* password = "#1288534459&4274321#ahmed";

// to get th chatid
// https://api.telegram.org/bot7653321138:AAFDBqtDK2peK0b-BMNzEea-DfWFs0cmFQI/getUpdates

// Telegram Bot API details
const char* botToken = "7653321138:AAFDBqtDK2peK0b-BMNzEea-DfWFs0cmFQI";
const char* chatId = "6738558948";
const char* telegramServer = "api.telegram.org";

// Hardware setup
#define MQ4_PIN 34
#define RED_LED 26
#define GREEN_LED 25
#define BUZZER 27
#define BUTTON 33
#define SERVO_PIN 14

Servo myServo;  // Use Servo class
LiquidCrystal_I2C lcd(0x27, 16, 2);

float gasValue = 0;

void setup() {
  Serial.begin(115200);
  pinMode(MQ4_PIN, INPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);
  myServo.attach(SERVO_PIN);
  myServo.write(0);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Connecting...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("WiFi connected!");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi Connected");
  delay(2000);
}

void sendTelegramMessage(String message) {

  HTTPClient http;
  String url = "https://" + String(telegramServer) + "/bot" + String(botToken) + "/sendMessage?chat_id=" + String(chatId) + "&text=" + urlEncode(message);
  http.begin(url);
  int httpCode = http.GET();

  if (httpCode > 0) {
    String response = http.getString();
    Serial.println("HTTP Response code: " + String(httpCode));
    Serial.println("Response: " + response);
  } else {
    Serial.println("Error on HTTP request: " + String(httpCode));
  }

  http.end();
}

String urlEncode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += "%20";
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) code1 = (c & 0xf) - 10 + 'A';
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) code0 = c - 10 + 'A';
      encodedString += "%";
      encodedString += code0;
      encodedString += code1;
    }
  }
  return encodedString;
}

void loop() {
  gasValue = analogRead(MQ4_PIN);
  Serial.print("Gas Level: ");
  Serial.println(gasValue);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Gas: ");
  lcd.print(gasValue);
  lcd.setCursor(0, 1);
  lcd.print("WiFi OK | Bot OK");

  checkSerial();

  if (gasValue > 400) {
    digitalWrite(RED_LED, HIGH);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(BUZZER, HIGH);
    myServo.write(90);
    String text = "⚠️ Gas Detected!\nGas Level: " + String(gasValue);
    sendTelegramMessage(text);
    Serial.println("Gas detected! Alert sent.");
    lcd.setCursor(0, 1);
    lcd.print("Alert Sent!");
  } else {
    digitalWrite(RED_LED, LOW);
    digitalWrite(BUZZER, LOW);
  }

  if (digitalRead(BUTTON) == LOW) {
    Serial.println("Resetting...");
    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(RED_LED, LOW);
    digitalWrite(BUZZER, LOW);
    myServo.write(0);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Monitoring...");
    delay(500);
  }
  delay(1000);
}


void checkSerial() {
  if (Serial.available() > 0) {
    String inputString = Serial.readStringUntil('\n');
    inputString.trim();
    if (inputString.equalsIgnoreCase("do")) {  // Check if input is "do" (case-insensitive)
      // Your code to execute when "do" is received
      Serial.println("Received 'do', executing code...");
      gasValue = 500;
    } else {
      Serial.print("Received: ");
      Serial.println(inputString);
      Serial.println("Command not recognized.");
    }
  }
}
